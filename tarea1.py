# -*- coding: utf-8 -*-
"""proyecto1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p3Dr6GZwIUziuls5mjsbQqjeYESCWWTP
"""

#PROJECTO 1 ERIKA PERALTA BAEZ

"""EJERCICIO 1


"""

# Importando librerias

import sys
import keyword
import operator
from datetime import datetime
import os

# Librería
import numpy as np

import pandas as pd

Dia = ['lunes', 'martes', 'miercoles', 'jueves', 'viernes']

v1 = np.array(Dia) #Array 
v1

Nro_unidades= [2, 3, 2, 5, 7]
v2=np.array(Nro_unidades)
v2

prec_unitario=np.full(5,10)
v3=np.array(prec_unitario)
v3

#valor de las ventas sin descuento
v5=v2*v3
v5

matriz= np.array([[v1], 
               [v2],
               [v3],
               [v5]
               ]
              )
matriz

print("Matriz original:  \n  ", matriz, matriz.dtype)
print("Matriz transpuesta:  \n ", matriz.T, matriz.dtype)

#Aca, me hubiera gustado encontrar una forma de como crear una nueva columna, donde se susttuyeran los lunes, martes, miercoles, juevesy viernes por 1, 2, 3, 4, 5. Lo tuve que hacer manual
matriz_t = [["lunes", 2, 10, 20],

 ["martes", 3, 10, 30],

 ["miercoles", 2, 10, 20],

 ["jueves", 5, 10, 50],

 ["viernes", 7, 10, 70]]

matriz_t

#Ventas de los ultimos 5 días, por número de unidad vendida (2 a 7) y precio unitario (10)- Antes de aplicar descuento
matriz2 = pd.DataFrame(
    data=matriz_t,   
    columns=["día", "Nro_Unidades", "precio_unitario", "ingreso_ventas"]
    ) 
matriz2

desct_5=np.full(5,9.5)
v4=np.array(desct_5)
v4

#Aca estoy multiplicando el número de unidades vendidas por el nuevo precio de descuento del 5%
print (v2)
print (v4)

ventas_descuento=v2*v4
ventas_descuento
v6=ventas_descuento
v6

matriz_ejeric1= np.array([[v1], 
               [v2],
               [v3],
               [v5],
               [v6]
               ]
              )

matriz_ejeric1

print("Matriz original:  \n  ", matriz_ejeric1, matriz_ejeric1.dtype)
print("Matriz transpuesta:  \n ", matriz_ejeric1.T, matriz_ejeric1.dtype)

matriz_final1= [['lunes','2','10','20','19.0'],

 ['martes','3','10','30','28.5'],

 ['miercoles','2','10','20','19.0'],

 ['jueves','5','10','50','47.5'],

 ['viernes','7','10','70','66.5']]

matriz_final1

matriz_end = pd.DataFrame(
    data=matriz_final1,   
    columns=["día", "Nro_Unidades", "precio_unitario", "ingreso_ventas", "ingreso_con_descuento"]
    ) 
matriz_end

"""# EJERCICIO 2"""

#Crear un diccionario



enero = {"cliente1": 1000, "cliente2": 2000, "cliente3":4000, "cliente4":5000}
febrero = {"cliente1":2000, "cliente2":3000, "cliente3":5000, "cliente4":7000}
marzo={"cliente1":4300, "cliente2":6500, "cliente3":4200, "cliente4":6500}
abril={"cliente1":4500, "cliente2":7500, "cliente3":6300, "cliente4":5800}
mayo={"cliente1":2300, "cliente2":3500, "cliente3":5200, "cliente4":4500}
junio={"cliente1":3300, "cliente2":4900, "cliente3":7600, "cliente4":3900}



itemss_enero= enero.items()
print (itemss)
itemss_feb = febrero.items()
print (itemss)
itemss_marz = marzo.items()
print (itemss)
itemss_abril = abril.items()
print (itemss)
itemss_mayo = mayo.items()
print (itemss)
itemss_junio = junio.items()
print(itemss)

print(list(enero.values())) 
print(list(febrero.values()))
print(list(marzo.values()))
print(list(abril.values()))
print(list(mayo.values()))
print(list(junio.values()))

ingresos_mensuales= np.array ([[1000, 2000, 4000, 5000],
[2000, 3000, 5000, 7000],
[4300, 6500, 4200, 6500],
[4500, 7500, 6300, 5800],
[2300, 3500, 5200, 4500],
[3300, 4900, 7600, 3900]])
ingresos_mensuales

print("Media: ", np.mean(ingresos_mensuales)) 
print("Mínimo: ", np.min(ingresos_mensuales))
print("Máximo: ", np.max(ingresos_mensuales))

"""EJERCICIO 3"""

ventas_y_gastos=np.array([["enero", 30500, 22000], ["febrero", 35600, 23450], ["marzo", 28300, 18100], ["abril", 33900, 35700], ["marzo", 42500, 32450]])

#TAMBIÉN PUEDO HACER LISTAS POR CADA COLUMNA: MES, VENTAS Y GASTO, Y COLVERTIRLAS EN ARRAY
mes3=np.array (["enero", "febrero", "marzo", "abril", "marzo"])

ventas1 = np.array([30500, 35600, 28300, 33900, 42500])
Gastos2=np.array([22000, 23450, 18100, 35700, 32450])  
print(mes3)
print(ventas1)
print(Gastos2)

#Generar data frame con los siguientes datos
print (ventas_y_gastos)

ventas_y_gastos2 = pd.DataFrame(
    data=ventas_y_gastos,   
    columns=["Mes", "Ventas", "Gastos"]
    ) 
ventas_y_gastos2

print(ventas1)
print(Gastos2)

ventas1 = np.array([30500, 35600, 28300, 33900, 42500])
Gastos2=np.array([22000, 23450, 18100, 35700, 32450])      

print(ventas1)
print (Gastos2)

columna1=Gastos2/ventas1*100
columna1
print(columna1)

#Me hubiera gustado poder saber como anexar una columna completa directamente sobre el dataframe sin usar pandas. Tuve que meter los datos de los resultados a mano sobre la matriz de ventas_y_gastos3
ventas_y_gastos3=np.array([["enero", 30500, 22000, 72.13, ], ["febrero", 35600, 23450, 65.87], ["marzo", 28300, 18100, 63.95], ["abril", 33900, 35700, 105.3], ["marzo", 42500, 32450, 76.35]])
print (ventas_y_gastos3)

ventas_y_gastos4 = pd.DataFrame(
    data=ventas_y_gastos3,   
    columns=["Mes", "Ventas", "Gastos", "columna1"]
    ) 
ventas_y_gastos4

#Creando columna 2. Lo que hice fue calcular dato por dato las ventas mensuales. Este ejercicio lo hice antes de tener la clase de Pandas, por ende me hubiera gustado saber como se usa el "append" para columnas

columna2 = int(input("Ingrese sus ventas mensuales (US$): "))
if columna2 >=3000:
  print("Meta superada")
else:
  print("Meta no superada")

col2=np.array(["meta superada", "meta superada", "meta superada", "meta superada", "meta superada"])
print(col2)

#Generando columna 3
col30=int(input("Ingrese su gasto (US$): "))
if 22000 >30500:
  print("Existe sobregasto")
else:
  print("No existe sobregasto")

col31=int(input("Ingrese su gasto (US$): "))
if 23450 >35600:
  print("Existe sobregasto")
else:
  print("No existe sobregasto")

col32=int(input("Ingrese su gasto (US$): "))
if 18100 >28300:
  print("Existe sobregasto-calcule")
else:
  print("No existe sobregasto")

col33=int(input("Ingrese su gasto (US$): "))
if 35700 >33900:
  print("Existe sobregasto-calcule")
else:
  print("No existe sobregasto")

35700-33900

col34=int(input("Ingrese su gasto (US$): "))
if 32450 >42500:
  print("Existe sobregasto-calcule")
else:
  print("No existe sobregasto")

columna3=np.array(["sin sobre gasto", "sin sobre gasto", "sin sobre gasto", 1800, "sin sobre gasto"])
print(columna3)

print(mes3)
print(ventas1)
print(Gastos2)
print(columna1)
print(col2)
print(columna3)

ventas_y_gastos5=np.array([['enero','febrero','marzo','abril','marzo'],
[30500, 35600, 28300, 33900, 42500],
[22000, 23450, 18100, 35700, 32450],
[72.13114754, 65.87078652,  63.95759717, 105.30973451, 76.35294118],
['meta superada','meta superada', 'meta superada', 'meta superada','meta superada'],
['Sin sobre gasto','sin sobre gasto','sin sobre gasto',1800,'sin sobre gasto']])

print(ventas_y_gastos5)

#Debo transponer mi matriz, para que el numero de columnas coincida 
print("Matriz original:  \n  ", ventas_y_gastos5, ventas_y_gastos5.dtype)
print("Matriz transpuesta:  \n ", ventas_y_gastos5.T, ventas_y_gastos5.dtype)

ventas_y_gastos6=np.array ([['enero',30500, 22000, 72.13114754, 'meta superada','Sin sobre gasto'],
 ['febrero', 35600, 23450, 65.87078652,'meta superada','sin sobre gasto'],
 ['marzo',28300,18100,63.95759717,'meta superada','sin sobre gasto'],
 ['abril',33900,35700,105.30973451,'meta superada',1800],
 ['marzo',42500,32450,76.35294118,'meta superada','sin sobre gasto']])

#Suponiendo que hay otro cliente o producto distinto y existen dos meses de marzo
#Crear el Data.frame de mi tabla con los resultados en columnas
ventas_y_gastos7 = pd.DataFrame(
    data=ventas_y_gastos6,   
    columns=["Mes", "Ventas", "Gastos", "columna1","columna2","columna3"]) 
print(ventas_y_gastos7)

#aca hay en la tabla una trampra, porque no sé si se equivocaron y el segundo marzo es mayo, o en realidad es mazro

#Total de ventas de los ultimos 3 meses- en el caso de que fuera mayo
print(ventas1)
ventas4=ventas1[2:]
print(ventas4)
42500+33900+28300

#En caso de que hay doble fila para marzo, entonces las instrucciones cambian
#Total de ventas de los ultimos 3 meses- marzo tiene doble fila. LOS ULTIMOS 3 MESES SON FEBRERO, MARZO Y ABRIL.
print(ventas1)
ventas5=ventas1[1:]
print(ventas5)
42500+33900+28300+35600

#en el caso de que el segundo marzo fuera mayo-ERROR DE DEDO DEL PROFESOR
#Total de gastos de febrero a abril
print(Gastos2)
gastos5=Gastos2[1:4]
print(gastos5)
23450+18100+35700

#nO HAY ERROR DE DEDO Y EXISTE UNA DOBLE FILA DE MARZO
#Total de gastos de febrero a abril, DONDE EXISTE DOBLE FILA DE MARZO
print(Gastos2)
gastos6=Gastos2[1:5]
print(gastos6)
23450+18100+35700+32450

#EJERCICIO 4
#gENERAR DATA FRAME CON DATOS DEL FICHERO

"""# Nueva sección

EJERCICIO 4

#Generar data frame con datos del fichero
```
"""

import pandas as pd
#PRIMERO QUE DEBE CARGAR A COLAB EL ARCHI CSV PARA QUE PUEDA LEER LA RUTA, CLICK EN BOTON DERECHO PARA COPIAR RUTA. TUVE QUE VER UN TUTORIAL DE YOUTUBE PARA SABER ESTO.
Riesgos=pd.read_csv("/Data - Riesgos.csv", delimiter=",")

Riesgos

#Corroboro que sea data frame
print(type(Riesgos))

#Dimensiones del data frame
Riesgos.ndim

#Número de datos. SE MULTIPLICAN LINEAS POR COLUMNAS
Riesgos.size

#Nombres de columnas y filas
Riesgos.head

#tipos de datos
Riesgos.dtypes

#Obteniendo información de la base de datos
Riesgos.info()

#Devolver las primeras 10 filas
Riesgos2=Riesgos.iloc[:10]
print(Riesgos2)

#Otra manera de mostrar las primeras 10 filas
Riesgos.head(10)

#Verificar si hay datos nulos
Riesgos2.isnull()

#Devolver las ultimas 10 filas
Riesgos3=Riesgos.iloc[-10:]
print(Riesgos3)

#Otra manera de obtener los ultimos 10 datos
Riesgos.tail(10)

#Verificar si hay datos nulos
Riesgos3.isnull()

#Extraer las primeras 100 filas (porque no hay 100 columnas) y almacenarlas en un contenedor. El contenedor se llama Riesgos1.
Riesgos1=Riesgos[:100]
print (Riesgos1)
